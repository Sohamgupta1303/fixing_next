// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// College System
model College {
  id             String         @id @default(cuid())
  name           String
  domains        String[]       // Email domains like ["utexas.edu", "cs.utexas.edu"]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  users          User[]
  organizations  Organization[]
}

// Core User System
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(STUDENT)
  collegeId     String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  college              College?                @relation(fields: [collegeId], references: [id])
  accounts             Account[]
  sessions             Session[]
  organizationRoles    UserOrganization[]
  applicationResponses ApplicationResponse[]
  payments             Payment[]
  events               Event[]                 // Events the user has joined/registered for
  tasks                Task[]
}

model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           OrgRole      @default(MEMBER)
  createdAt      DateTime     @default(now())
  
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

// Organization System
model Organization {
  id          String    @id @default(cuid())
  name        String
  description String?
  image       String?   // Logo URL
  category    String?
  collegeId   String?
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  college     College?              @relation(fields: [collegeId], references: [id])
  members     UserOrganization[]
  events      Event[]
  applications ApplicationForm[]
}

// Events System
model Event {
  id             String       @id @default(cuid())
  title          String
  description    String?
  image          String?
  startDate      DateTime
  endDate        DateTime?
  location       String?
  capacity       Int?
  requiresPayment Boolean     @default(false)
  price          Int?        // Price in cents
  organizationId String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  attendees      User[]       // Many-to-many relation for registered users
  payments       Payment[]
}

// Application System
model ApplicationForm {
  id             String                @id @default(cuid())
  title          String
  description    String?
  isActive       Boolean               @default(true)
  deadline       DateTime?
  requiresPayment Boolean              @default(false)
  applicationFee Int?                  // Fee in cents
  organizationId String
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  // Relations
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  questions      ApplicationQuestion[]
  responses      ApplicationResponse[]
}

model ApplicationQuestion {
  id          String              @id @default(cuid())
  formId      String
  question    String
  type        QuestionType
  options     String[]            // For multiple choice questions
  required    Boolean             @default(true)
  order       Int                 // Order of question in form
  createdAt   DateTime            @default(now())

  // Relations
  form        ApplicationForm     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers     ApplicationAnswer[]
}

model ApplicationResponse {
  id          String              @id @default(cuid())
  formId      String
  userId      String
  status      ResponseStatus      @default(PENDING)
  submittedAt DateTime            @default(now())
  reviewedAt  DateTime?
  notes       String?             // Admin notes

  // Relations
  form        ApplicationForm     @relation(fields: [formId], references: [id], onDelete: Cascade)
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers     ApplicationAnswer[]
  payment     Payment?

  @@unique([formId, userId]) // One response per user per form
}

model ApplicationAnswer {
  id         String              @id @default(cuid())
  responseId String
  questionId String
  answer     String              // Store as JSON string if needed for complex data
  createdAt  DateTime            @default(now())

  // Relations
  response   ApplicationResponse @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question   ApplicationQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([responseId, questionId])
}

// Payment System (Stripe Integration)
model Payment {
  id               String            @id @default(cuid())
  userId           String
  amount           Int               // Amount in cents
  currency         String            @default("usd")
  status           PaymentStatus     @default(PENDING)
  stripePaymentId  String?           @unique // Stripe Payment Intent ID
  stripeClientSecret String?
  description      String?
  
  // Optional relations - a payment can be for different things
  eventId          String?
  responseId       String?           @unique
  
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  event            Event?            @relation(fields: [eventId], references: [id])
  applicationResponse ApplicationResponse? @relation(fields: [responseId], references: [id])
}

model Task {
  id          String    @id @default(cuid())
  userId      String
  title       String    // short description of the task
  description String?   // optional longer notes
  dueDate     DateTime? // optional deadline
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relation back to the student
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum Role {
  STUDENT
  ORG_ADMIN
  SUPER_ADMIN
}

enum OrgRole {
  MEMBER
  ADMIN
  OWNER
}

enum QuestionType {
  TEXT
  TEXTAREA
  MULTIPLE_CHOICE
  CHECKBOX
  EMAIL
  NUMBER
  DATE
  FILE_UPLOAD
}

enum ResponseStatus {
  PENDING
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  WAITLISTED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}
